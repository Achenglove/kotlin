FILE fqName:<root> fileName:/TreeMapBridge.kt
  CLASS CLASS name:IntervalTreeMap modality:FINAL visibility:private superTypes:[java.util.TreeMap<kotlin.String, kotlin.String>]
    $this: VALUE_PARAMETER INSTANCE_RECEIVER name:<this> type:<root>.IntervalTreeMap
    CONSTRUCTOR visibility:public <> () returnType:<root>.IntervalTreeMap [primary]
      BLOCK_BODY
        DELEGATING_CONSTRUCTOR_CALL 'public constructor <init> () declared in java.util.TreeMap'
          <K>: kotlin.String
          <V>: kotlin.String
        INSTANCE_INITIALIZER_CALL classDescriptor='CLASS CLASS name:IntervalTreeMap modality:FINAL visibility:private superTypes:[java.util.TreeMap<kotlin.String, kotlin.String>]'
    FUN FAKE_OVERRIDE name:comparator visibility:public modality:OPEN <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>) returnType:java.util.Comparator<in kotlin.String?>? [fake_override]
      overridden:
        public open fun comparator (): java.util.Comparator<in K of java.util.TreeMap?>? declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
    FUN FAKE_OVERRIDE name:size visibility:public modality:OPEN <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>) returnType:kotlin.Int [fake_override]
      overridden:
        public open fun size (): kotlin.Int declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
    PROPERTY FAKE_OVERRIDE name:size visibility:public modality:ABSTRACT [fake_override,val]
      FUN FAKE_OVERRIDE name:<get-size> visibility:public modality:ABSTRACT <> ($this:kotlin.collections.Map<K of kotlin.collections.Map, V of kotlin.collections.Map>) returnType:kotlin.Int [fake_override]
        correspondingProperty: PROPERTY FAKE_OVERRIDE name:size visibility:public modality:ABSTRACT [fake_override,val]
        overridden:
          public abstract fun <get-size> (): kotlin.Int declared in kotlin.collections.Map
        $this: VALUE_PARAMETER name:<this> type:kotlin.collections.Map<K of kotlin.collections.Map, V of kotlin.collections.Map>
    FUN FAKE_OVERRIDE name:entrySet visibility:public modality:OPEN <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>) returnType:kotlin.collections.Set<kotlin.collections.Map.Entry<kotlin.String?, kotlin.String?>?>? [fake_override]
      overridden:
        public open fun entrySet (): kotlin.collections.Set<kotlin.collections.Map.Entry<K of java.util.TreeMap?, V of java.util.TreeMap?>?>? declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
    FUN FAKE_OVERRIDE name:navigableKeySet visibility:public modality:OPEN <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>) returnType:java.util.NavigableSet<kotlin.String?>? [fake_override]
      overridden:
        public open fun navigableKeySet (): java.util.NavigableSet<K of java.util.TreeMap?>? declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
    FUN FAKE_OVERRIDE name:descendingMap visibility:public modality:OPEN <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>) returnType:java.util.NavigableMap<kotlin.String?, kotlin.String?>? [fake_override]
      overridden:
        public open fun descendingMap (): java.util.NavigableMap<K of java.util.TreeMap?, V of java.util.TreeMap?>? declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
    FUN FAKE_OVERRIDE name:containsKey visibility:public modality:OPEN <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>, p0:kotlin.String?) returnType:kotlin.Boolean [fake_override]
      overridden:
        public open fun containsKey (p0: K of java.util.TreeMap?): kotlin.Boolean declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
      VALUE_PARAMETER name:p0 index:0 type:kotlin.String?
    FUN FAKE_OVERRIDE name:containsValue visibility:public modality:OPEN <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>, p0:kotlin.String?) returnType:kotlin.Boolean [fake_override]
      overridden:
        public open fun containsValue (p0: V of java.util.TreeMap?): kotlin.Boolean declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
      VALUE_PARAMETER name:p0 index:0 type:kotlin.String?
    FUN FAKE_OVERRIDE name:get visibility:public modality:OPEN <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>, p0:kotlin.String?) returnType:kotlin.String? [fake_override,operator]
      overridden:
        public open fun get (p0: K of java.util.TreeMap?): V of java.util.TreeMap? [operator] declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
      VALUE_PARAMETER name:p0 index:0 type:kotlin.String?
    FUN FAKE_OVERRIDE name:firstKey visibility:public modality:OPEN <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>) returnType:kotlin.String? [fake_override]
      overridden:
        public open fun firstKey (): K of java.util.TreeMap? declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
    FUN FAKE_OVERRIDE name:lastKey visibility:public modality:OPEN <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>) returnType:kotlin.String? [fake_override]
      overridden:
        public open fun lastKey (): K of java.util.TreeMap? declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
    FUN FAKE_OVERRIDE name:putAll visibility:public modality:OPEN <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>, p0:kotlin.collections.Map<out kotlin.String?, out kotlin.String?>) returnType:kotlin.Unit [fake_override]
      overridden:
        public open fun putAll (p0: kotlin.collections.Map<out K of java.util.TreeMap?, out V of java.util.TreeMap?>): kotlin.Unit declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
      VALUE_PARAMETER name:p0 index:0 type:kotlin.collections.Map<out kotlin.String?, out kotlin.String?>
    FUN FAKE_OVERRIDE name:getEntry visibility:public/*package*/ modality:FINAL <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>, p0:kotlin.Any?) returnType:java.util.TreeMap.Entry<kotlin.String?, kotlin.String?>? [fake_override]
      overridden:
        public/*package*/ final fun getEntry (p0: kotlin.Any?): java.util.TreeMap.Entry<K of java.util.TreeMap?, V of java.util.TreeMap?>? declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
      VALUE_PARAMETER name:p0 index:0 type:kotlin.Any?
    FUN FAKE_OVERRIDE name:getEntryUsingComparator visibility:public/*package*/ modality:FINAL <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>, p0:kotlin.Any?) returnType:java.util.TreeMap.Entry<kotlin.String?, kotlin.String?>? [fake_override]
      overridden:
        public/*package*/ final fun getEntryUsingComparator (p0: kotlin.Any?): java.util.TreeMap.Entry<K of java.util.TreeMap?, V of java.util.TreeMap?>? declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
      VALUE_PARAMETER name:p0 index:0 type:kotlin.Any?
    FUN FAKE_OVERRIDE name:getCeilingEntry visibility:public/*package*/ modality:FINAL <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>, p0:kotlin.String?) returnType:java.util.TreeMap.Entry<kotlin.String?, kotlin.String?>? [fake_override]
      overridden:
        public/*package*/ final fun getCeilingEntry (p0: K of java.util.TreeMap?): java.util.TreeMap.Entry<K of java.util.TreeMap?, V of java.util.TreeMap?>? declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
      VALUE_PARAMETER name:p0 index:0 type:kotlin.String?
    FUN FAKE_OVERRIDE name:getFloorEntry visibility:public/*package*/ modality:FINAL <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>, p0:kotlin.String?) returnType:java.util.TreeMap.Entry<kotlin.String?, kotlin.String?>? [fake_override]
      overridden:
        public/*package*/ final fun getFloorEntry (p0: K of java.util.TreeMap?): java.util.TreeMap.Entry<K of java.util.TreeMap?, V of java.util.TreeMap?>? declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
      VALUE_PARAMETER name:p0 index:0 type:kotlin.String?
    FUN FAKE_OVERRIDE name:getHigherEntry visibility:public/*package*/ modality:FINAL <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>, p0:kotlin.String?) returnType:java.util.TreeMap.Entry<kotlin.String?, kotlin.String?>? [fake_override]
      overridden:
        public/*package*/ final fun getHigherEntry (p0: K of java.util.TreeMap?): java.util.TreeMap.Entry<K of java.util.TreeMap?, V of java.util.TreeMap?>? declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
      VALUE_PARAMETER name:p0 index:0 type:kotlin.String?
    FUN FAKE_OVERRIDE name:getLowerEntry visibility:public/*package*/ modality:FINAL <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>, p0:kotlin.String?) returnType:java.util.TreeMap.Entry<kotlin.String?, kotlin.String?>? [fake_override]
      overridden:
        public/*package*/ final fun getLowerEntry (p0: K of java.util.TreeMap?): java.util.TreeMap.Entry<K of java.util.TreeMap?, V of java.util.TreeMap?>? declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
      VALUE_PARAMETER name:p0 index:0 type:kotlin.String?
    FUN FAKE_OVERRIDE name:put visibility:public modality:OPEN <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>, p0:kotlin.String?, p1:kotlin.String?) returnType:kotlin.String? [fake_override]
      overridden:
        public open fun put (p0: K of java.util.TreeMap?, p1: V of java.util.TreeMap?): V of java.util.TreeMap? declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
      VALUE_PARAMETER name:p0 index:0 type:kotlin.String?
      VALUE_PARAMETER name:p1 index:1 type:kotlin.String?
    FUN FAKE_OVERRIDE name:remove visibility:public modality:OPEN <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>, p0:kotlin.String?) returnType:kotlin.String? [fake_override]
      overridden:
        public open fun remove (p0: K of java.util.TreeMap?): V of java.util.TreeMap? declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
      VALUE_PARAMETER name:p0 index:0 type:kotlin.String?
    FUN FAKE_OVERRIDE name:remove visibility:public modality:OPEN <> ($this:kotlin.collections.MutableMap<K of kotlin.collections.MutableMap, V of kotlin.collections.MutableMap>, key:kotlin.String?, value:kotlin.String?) returnType:kotlin.Boolean [fake_override]
      overridden:
        public open fun remove (key: K of kotlin.collections.MutableMap, value: V of kotlin.collections.MutableMap): kotlin.Boolean declared in kotlin.collections.MutableMap
      $this: VALUE_PARAMETER name:<this> type:kotlin.collections.MutableMap<K of kotlin.collections.MutableMap, V of kotlin.collections.MutableMap>
      VALUE_PARAMETER name:key index:0 type:kotlin.String?
      VALUE_PARAMETER name:value index:1 type:kotlin.String?
    FUN FAKE_OVERRIDE name:clear visibility:public modality:OPEN <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>) returnType:kotlin.Unit [fake_override]
      overridden:
        public open fun clear (): kotlin.Unit declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
    FUN FAKE_OVERRIDE name:clone visibility:public modality:OPEN <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>) returnType:kotlin.Any [fake_override]
      overridden:
        public open fun clone (): kotlin.Any declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
    FUN FAKE_OVERRIDE name:firstEntry visibility:public modality:OPEN <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>) returnType:kotlin.collections.Map.Entry<kotlin.String?, kotlin.String?>? [fake_override]
      overridden:
        public open fun firstEntry (): kotlin.collections.Map.Entry<K of java.util.TreeMap?, V of java.util.TreeMap?>? declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
    FUN FAKE_OVERRIDE name:lastEntry visibility:public modality:OPEN <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>) returnType:kotlin.collections.Map.Entry<kotlin.String?, kotlin.String?>? [fake_override]
      overridden:
        public open fun lastEntry (): kotlin.collections.Map.Entry<K of java.util.TreeMap?, V of java.util.TreeMap?>? declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
    FUN FAKE_OVERRIDE name:pollFirstEntry visibility:public modality:OPEN <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>) returnType:kotlin.collections.Map.Entry<kotlin.String?, kotlin.String?>? [fake_override]
      overridden:
        public open fun pollFirstEntry (): kotlin.collections.Map.Entry<K of java.util.TreeMap?, V of java.util.TreeMap?>? declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
    FUN FAKE_OVERRIDE name:pollLastEntry visibility:public modality:OPEN <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>) returnType:kotlin.collections.Map.Entry<kotlin.String?, kotlin.String?>? [fake_override]
      overridden:
        public open fun pollLastEntry (): kotlin.collections.Map.Entry<K of java.util.TreeMap?, V of java.util.TreeMap?>? declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
    FUN FAKE_OVERRIDE name:lowerEntry visibility:public modality:OPEN <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>, p0:kotlin.String?) returnType:kotlin.collections.Map.Entry<kotlin.String?, kotlin.String?>? [fake_override]
      overridden:
        public open fun lowerEntry (p0: K of java.util.TreeMap?): kotlin.collections.Map.Entry<K of java.util.TreeMap?, V of java.util.TreeMap?>? declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
      VALUE_PARAMETER name:p0 index:0 type:kotlin.String?
    FUN FAKE_OVERRIDE name:lowerKey visibility:public modality:OPEN <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>, p0:kotlin.String?) returnType:kotlin.String? [fake_override]
      overridden:
        public open fun lowerKey (p0: K of java.util.TreeMap?): K of java.util.TreeMap? declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
      VALUE_PARAMETER name:p0 index:0 type:kotlin.String?
    FUN FAKE_OVERRIDE name:floorEntry visibility:public modality:OPEN <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>, p0:kotlin.String?) returnType:kotlin.collections.Map.Entry<kotlin.String?, kotlin.String?>? [fake_override]
      overridden:
        public open fun floorEntry (p0: K of java.util.TreeMap?): kotlin.collections.Map.Entry<K of java.util.TreeMap?, V of java.util.TreeMap?>? declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
      VALUE_PARAMETER name:p0 index:0 type:kotlin.String?
    FUN FAKE_OVERRIDE name:floorKey visibility:public modality:OPEN <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>, p0:kotlin.String?) returnType:kotlin.String? [fake_override]
      overridden:
        public open fun floorKey (p0: K of java.util.TreeMap?): K of java.util.TreeMap? declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
      VALUE_PARAMETER name:p0 index:0 type:kotlin.String?
    FUN FAKE_OVERRIDE name:ceilingEntry visibility:public modality:OPEN <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>, p0:kotlin.String?) returnType:kotlin.collections.Map.Entry<kotlin.String?, kotlin.String?>? [fake_override]
      overridden:
        public open fun ceilingEntry (p0: K of java.util.TreeMap?): kotlin.collections.Map.Entry<K of java.util.TreeMap?, V of java.util.TreeMap?>? declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
      VALUE_PARAMETER name:p0 index:0 type:kotlin.String?
    FUN FAKE_OVERRIDE name:ceilingKey visibility:public modality:OPEN <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>, p0:kotlin.String?) returnType:kotlin.String? [fake_override]
      overridden:
        public open fun ceilingKey (p0: K of java.util.TreeMap?): K of java.util.TreeMap? declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
      VALUE_PARAMETER name:p0 index:0 type:kotlin.String?
    FUN FAKE_OVERRIDE name:higherEntry visibility:public modality:OPEN <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>, p0:kotlin.String?) returnType:kotlin.collections.Map.Entry<kotlin.String?, kotlin.String?>? [fake_override]
      overridden:
        public open fun higherEntry (p0: K of java.util.TreeMap?): kotlin.collections.Map.Entry<K of java.util.TreeMap?, V of java.util.TreeMap?>? declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
      VALUE_PARAMETER name:p0 index:0 type:kotlin.String?
    FUN FAKE_OVERRIDE name:higherKey visibility:public modality:OPEN <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>, p0:kotlin.String?) returnType:kotlin.String? [fake_override]
      overridden:
        public open fun higherKey (p0: K of java.util.TreeMap?): K of java.util.TreeMap? declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
      VALUE_PARAMETER name:p0 index:0 type:kotlin.String?
    FUN FAKE_OVERRIDE name:keySet visibility:public modality:OPEN <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>) returnType:kotlin.collections.Set<kotlin.String?>? [fake_override]
      overridden:
        public open fun keySet (): kotlin.collections.Set<K of java.util.TreeMap?>? declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
    FUN FAKE_OVERRIDE name:descendingKeySet visibility:public modality:OPEN <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>) returnType:java.util.NavigableSet<kotlin.String?>? [fake_override]
      overridden:
        public open fun descendingKeySet (): java.util.NavigableSet<K of java.util.TreeMap?>? declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
    FUN FAKE_OVERRIDE name:values visibility:public modality:OPEN <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>) returnType:kotlin.collections.Collection<kotlin.String?>? [fake_override]
      overridden:
        public open fun values (): kotlin.collections.Collection<V of java.util.TreeMap?>? declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
    PROPERTY FAKE_OVERRIDE name:values visibility:public modality:ABSTRACT [fake_override,val]
      FUN FAKE_OVERRIDE name:<get-values> visibility:public modality:ABSTRACT <> ($this:kotlin.collections.MutableMap<K of kotlin.collections.MutableMap, V of kotlin.collections.MutableMap>) returnType:kotlin.collections.MutableCollection<kotlin.String?> [fake_override]
        correspondingProperty: PROPERTY FAKE_OVERRIDE name:values visibility:public modality:ABSTRACT [fake_override,val]
        overridden:
          public abstract fun <get-values> (): kotlin.collections.MutableCollection<V of kotlin.collections.MutableMap> declared in kotlin.collections.MutableMap
        $this: VALUE_PARAMETER name:<this> type:kotlin.collections.MutableMap<K of kotlin.collections.MutableMap, V of kotlin.collections.MutableMap>
    FUN FAKE_OVERRIDE name:subMap visibility:public modality:OPEN <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>, p0:kotlin.String?, p1:kotlin.Boolean, p2:kotlin.String?, p3:kotlin.Boolean) returnType:java.util.NavigableMap<kotlin.String?, kotlin.String?>? [fake_override]
      overridden:
        public open fun subMap (p0: K of java.util.TreeMap?, p1: kotlin.Boolean, p2: K of java.util.TreeMap?, p3: kotlin.Boolean): java.util.NavigableMap<K of java.util.TreeMap?, V of java.util.TreeMap?>? declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
      VALUE_PARAMETER name:p0 index:0 type:kotlin.String?
      VALUE_PARAMETER name:p1 index:1 type:kotlin.Boolean
      VALUE_PARAMETER name:p2 index:2 type:kotlin.String?
      VALUE_PARAMETER name:p3 index:3 type:kotlin.Boolean
    FUN FAKE_OVERRIDE name:subMap visibility:public modality:OPEN <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>, p0:kotlin.String?, p1:kotlin.String?) returnType:java.util.SortedMap<kotlin.String?, kotlin.String?>? [fake_override]
      overridden:
        public open fun subMap (p0: K of java.util.TreeMap?, p1: K of java.util.TreeMap?): java.util.SortedMap<K of java.util.TreeMap?, V of java.util.TreeMap?>? declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
      VALUE_PARAMETER name:p0 index:0 type:kotlin.String?
      VALUE_PARAMETER name:p1 index:1 type:kotlin.String?
    FUN FAKE_OVERRIDE name:headMap visibility:public modality:OPEN <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>, p0:kotlin.String?, p1:kotlin.Boolean) returnType:java.util.NavigableMap<kotlin.String?, kotlin.String?>? [fake_override]
      overridden:
        public open fun headMap (p0: K of java.util.TreeMap?, p1: kotlin.Boolean): java.util.NavigableMap<K of java.util.TreeMap?, V of java.util.TreeMap?>? declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
      VALUE_PARAMETER name:p0 index:0 type:kotlin.String?
      VALUE_PARAMETER name:p1 index:1 type:kotlin.Boolean
    FUN FAKE_OVERRIDE name:headMap visibility:public modality:OPEN <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>, p0:kotlin.String?) returnType:java.util.SortedMap<kotlin.String?, kotlin.String?>? [fake_override]
      overridden:
        public open fun headMap (p0: K of java.util.TreeMap?): java.util.SortedMap<K of java.util.TreeMap?, V of java.util.TreeMap?>? declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
      VALUE_PARAMETER name:p0 index:0 type:kotlin.String?
    FUN FAKE_OVERRIDE name:tailMap visibility:public modality:OPEN <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>, p0:kotlin.String?, p1:kotlin.Boolean) returnType:java.util.NavigableMap<kotlin.String?, kotlin.String?>? [fake_override]
      overridden:
        public open fun tailMap (p0: K of java.util.TreeMap?, p1: kotlin.Boolean): java.util.NavigableMap<K of java.util.TreeMap?, V of java.util.TreeMap?>? declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
      VALUE_PARAMETER name:p0 index:0 type:kotlin.String?
      VALUE_PARAMETER name:p1 index:1 type:kotlin.Boolean
    FUN FAKE_OVERRIDE name:tailMap visibility:public modality:OPEN <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>, p0:kotlin.String?) returnType:java.util.SortedMap<kotlin.String?, kotlin.String?>? [fake_override]
      overridden:
        public open fun tailMap (p0: K of java.util.TreeMap?): java.util.SortedMap<K of java.util.TreeMap?, V of java.util.TreeMap?>? declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
      VALUE_PARAMETER name:p0 index:0 type:kotlin.String?
    FUN FAKE_OVERRIDE name:replace visibility:public modality:OPEN <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>, p0:kotlin.String?, p1:kotlin.String?, p2:kotlin.String?) returnType:kotlin.Boolean [fake_override]
      overridden:
        public open fun replace (p0: K of java.util.TreeMap?, p1: V of java.util.TreeMap?, p2: V of java.util.TreeMap?): kotlin.Boolean declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
      VALUE_PARAMETER name:p0 index:0 type:kotlin.String?
      VALUE_PARAMETER name:p1 index:1 type:kotlin.String?
      VALUE_PARAMETER name:p2 index:2 type:kotlin.String?
    FUN FAKE_OVERRIDE name:replace visibility:public modality:OPEN <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>, p0:kotlin.String?, p1:kotlin.String?) returnType:kotlin.String? [fake_override]
      overridden:
        public open fun replace (p0: K of java.util.TreeMap?, p1: V of java.util.TreeMap?): V of java.util.TreeMap? declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
      VALUE_PARAMETER name:p0 index:0 type:kotlin.String?
      VALUE_PARAMETER name:p1 index:1 type:kotlin.String?
    FUN FAKE_OVERRIDE name:forEach visibility:public modality:OPEN <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>, p0:java.util.function.BiConsumer<in kotlin.String?, in kotlin.String?>) returnType:kotlin.Unit [fake_override]
      overridden:
        public open fun forEach (p0: java.util.function.BiConsumer<in K of java.util.TreeMap?, in V of java.util.TreeMap?>): kotlin.Unit declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
      VALUE_PARAMETER name:p0 index:0 type:java.util.function.BiConsumer<in kotlin.String?, in kotlin.String?>
    FUN FAKE_OVERRIDE name:replaceAll visibility:public modality:OPEN <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>, p0:java.util.function.BiFunction<in kotlin.String?, in kotlin.String?, out kotlin.String?>) returnType:kotlin.Unit [fake_override]
      overridden:
        public open fun replaceAll (p0: java.util.function.BiFunction<in K of java.util.TreeMap?, in V of java.util.TreeMap?, out V of java.util.TreeMap?>): kotlin.Unit declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
      VALUE_PARAMETER name:p0 index:0 type:java.util.function.BiFunction<in kotlin.String?, in kotlin.String?, out kotlin.String?>
    FUN FAKE_OVERRIDE name:keyIterator visibility:public/*package*/ modality:OPEN <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>) returnType:kotlin.collections.Iterator<kotlin.String?>? [fake_override]
      overridden:
        public/*package*/ open fun keyIterator (): kotlin.collections.Iterator<K of java.util.TreeMap?>? declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
    FUN FAKE_OVERRIDE name:descendingKeyIterator visibility:public/*package*/ modality:OPEN <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>) returnType:kotlin.collections.Iterator<kotlin.String?>? [fake_override]
      overridden:
        public/*package*/ open fun descendingKeyIterator (): kotlin.collections.Iterator<K of java.util.TreeMap?>? declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
    FUN FAKE_OVERRIDE name:compare visibility:public/*package*/ modality:FINAL <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>, p0:kotlin.Any?, p1:kotlin.Any?) returnType:kotlin.Int [fake_override]
      overridden:
        public/*package*/ final fun compare (p0: kotlin.Any?, p1: kotlin.Any?): kotlin.Int declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
      VALUE_PARAMETER name:p0 index:0 type:kotlin.Any?
      VALUE_PARAMETER name:p1 index:1 type:kotlin.Any?
    FUN FAKE_OVERRIDE name:getFirstEntry visibility:public/*package*/ modality:FINAL <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>) returnType:java.util.TreeMap.Entry<kotlin.String?, kotlin.String?>? [fake_override]
      overridden:
        public/*package*/ final fun getFirstEntry (): java.util.TreeMap.Entry<K of java.util.TreeMap?, V of java.util.TreeMap?>? declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
    FUN FAKE_OVERRIDE name:getLastEntry visibility:public/*package*/ modality:FINAL <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>) returnType:java.util.TreeMap.Entry<kotlin.String?, kotlin.String?>? [fake_override]
      overridden:
        public/*package*/ final fun getLastEntry (): java.util.TreeMap.Entry<K of java.util.TreeMap?, V of java.util.TreeMap?>? declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
    FUN FAKE_OVERRIDE name:readTreeSet visibility:public/*package*/ modality:OPEN <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>, p0:kotlin.Int, p1:java.io.ObjectInputStream?, p2:kotlin.String?) returnType:kotlin.Unit [fake_override]
      overridden:
        public/*package*/ open fun readTreeSet (p0: kotlin.Int, p1: java.io.ObjectInputStream?, p2: V of java.util.TreeMap?): kotlin.Unit declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
      VALUE_PARAMETER name:p0 index:0 type:kotlin.Int
      VALUE_PARAMETER name:p1 index:1 type:java.io.ObjectInputStream?
      VALUE_PARAMETER name:p2 index:2 type:kotlin.String?
    FUN FAKE_OVERRIDE name:addAllForTreeSet visibility:public/*package*/ modality:OPEN <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>, p0:java.util.SortedSet<out kotlin.String?>?, p1:kotlin.String?) returnType:kotlin.Unit [fake_override]
      overridden:
        public/*package*/ open fun addAllForTreeSet (p0: java.util.SortedSet<out K of java.util.TreeMap?>?, p1: V of java.util.TreeMap?): kotlin.Unit declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
      VALUE_PARAMETER name:p0 index:0 type:java.util.SortedSet<out kotlin.String?>?
      VALUE_PARAMETER name:p1 index:1 type:kotlin.String?
    FUN FAKE_OVERRIDE name:keySpliterator visibility:public/*package*/ modality:FINAL <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>) returnType:java.util.Spliterator<kotlin.String?>? [fake_override]
      overridden:
        public/*package*/ final fun keySpliterator (): java.util.Spliterator<K of java.util.TreeMap?>? declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
    FUN FAKE_OVERRIDE name:descendingKeySpliterator visibility:public/*package*/ modality:FINAL <> ($this:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>) returnType:java.util.Spliterator<kotlin.String?>? [fake_override]
      overridden:
        public/*package*/ final fun descendingKeySpliterator (): java.util.Spliterator<K of java.util.TreeMap?>? declared in java.util.TreeMap
      $this: VALUE_PARAMETER name:<this> type:java.util.TreeMap<K of java.util.TreeMap, V of java.util.TreeMap>
    FUN FAKE_OVERRIDE name:isEmpty visibility:public modality:OPEN <> ($this:java.util.AbstractMap<K of java.util.AbstractMap, V of java.util.AbstractMap>) returnType:kotlin.Boolean [fake_override]
      overridden:
        public open fun isEmpty (): kotlin.Boolean declared in java.util.AbstractMap
        public abstract fun isEmpty (): kotlin.Boolean declared in kotlin.collections.Map
      $this: VALUE_PARAMETER name:<this> type:java.util.AbstractMap<K of java.util.AbstractMap, V of java.util.AbstractMap>
    FUN FAKE_OVERRIDE name:equals visibility:public modality:OPEN <> ($this:java.util.AbstractMap<K of java.util.AbstractMap, V of java.util.AbstractMap>, p0:kotlin.Any?) returnType:kotlin.Boolean [fake_override,operator]
      overridden:
        public open fun equals (p0: kotlin.Any?): kotlin.Boolean [operator] declared in java.util.AbstractMap
        public open fun equals (other: kotlin.Any?): kotlin.Boolean [operator] declared in java.util.NavigableMap
        public open fun equals (other: kotlin.Any?): kotlin.Boolean [operator] declared in kotlin.Any
      $this: VALUE_PARAMETER name:<this> type:java.util.AbstractMap<K of java.util.AbstractMap, V of java.util.AbstractMap>
      VALUE_PARAMETER name:p0 index:0 type:kotlin.Any?
    FUN FAKE_OVERRIDE name:hashCode visibility:public modality:OPEN <> ($this:java.util.AbstractMap<K of java.util.AbstractMap, V of java.util.AbstractMap>) returnType:kotlin.Int [fake_override]
      overridden:
        public open fun hashCode (): kotlin.Int declared in java.util.AbstractMap
        public open fun hashCode (): kotlin.Int declared in java.util.NavigableMap
        public open fun hashCode (): kotlin.Int declared in kotlin.Any
      $this: VALUE_PARAMETER name:<this> type:java.util.AbstractMap<K of java.util.AbstractMap, V of java.util.AbstractMap>
    FUN FAKE_OVERRIDE name:toString visibility:public modality:OPEN <> ($this:java.util.AbstractMap<K of java.util.AbstractMap, V of java.util.AbstractMap>) returnType:kotlin.String [fake_override]
      overridden:
        public open fun toString (): kotlin.String declared in java.util.AbstractMap
        public open fun toString (): kotlin.String declared in java.util.NavigableMap
        public open fun toString (): kotlin.String declared in kotlin.Any
      $this: VALUE_PARAMETER name:<this> type:java.util.AbstractMap<K of java.util.AbstractMap, V of java.util.AbstractMap>
    PROPERTY FAKE_OVERRIDE name:entries visibility:public modality:ABSTRACT [fake_override,val]
      FUN FAKE_OVERRIDE name:<get-entries> visibility:public modality:ABSTRACT <> ($this:kotlin.collections.MutableMap<K of kotlin.collections.MutableMap, V of kotlin.collections.MutableMap>) returnType:kotlin.collections.MutableSet<kotlin.collections.MutableMap.MutableEntry<kotlin.String?, kotlin.String?>> [fake_override]
        correspondingProperty: PROPERTY FAKE_OVERRIDE name:entries visibility:public modality:ABSTRACT [fake_override,val]
        overridden:
          public abstract fun <get-entries> (): kotlin.collections.MutableSet<kotlin.collections.MutableMap.MutableEntry<K of kotlin.collections.MutableMap, V of kotlin.collections.MutableMap>> declared in kotlin.collections.MutableMap
        $this: VALUE_PARAMETER name:<this> type:kotlin.collections.MutableMap<K of kotlin.collections.MutableMap, V of kotlin.collections.MutableMap>
    PROPERTY FAKE_OVERRIDE name:keys visibility:public modality:ABSTRACT [fake_override,val]
      FUN FAKE_OVERRIDE name:<get-keys> visibility:public modality:ABSTRACT <> ($this:kotlin.collections.MutableMap<K of kotlin.collections.MutableMap, V of kotlin.collections.MutableMap>) returnType:kotlin.collections.MutableSet<kotlin.String?> [fake_override]
        correspondingProperty: PROPERTY FAKE_OVERRIDE name:keys visibility:public modality:ABSTRACT [fake_override,val]
        overridden:
          public abstract fun <get-keys> (): kotlin.collections.MutableSet<K of kotlin.collections.MutableMap> declared in kotlin.collections.MutableMap
        $this: VALUE_PARAMETER name:<this> type:kotlin.collections.MutableMap<K of kotlin.collections.MutableMap, V of kotlin.collections.MutableMap>
    FUN FAKE_OVERRIDE name:getOrDefault visibility:public modality:OPEN <> ($this:java.util.Map<K of java.util.Map, V of java.util.Map>, p0:kotlin.String?, p1:kotlin.String?) returnType:kotlin.String? [fake_override]
      overridden:
        public open fun getOrDefault (p0: K of java.util.Map?, p1: V of java.util.Map?): V of java.util.Map? declared in java.util.Map
      $this: VALUE_PARAMETER name:<this> type:java.util.Map<K of java.util.Map, V of java.util.Map>
      VALUE_PARAMETER name:p0 index:0 type:kotlin.String?
      VALUE_PARAMETER name:p1 index:1 type:kotlin.String?
  FUN name:box visibility:public modality:FINAL <> () returnType:kotlin.String
    BLOCK_BODY
      VAR name:intervalTreeMap type:<root>.IntervalTreeMap [val]
        CONSTRUCTOR_CALL 'public constructor <init> () [primary] declared in <root>.IntervalTreeMap' type=<root>.IntervalTreeMap origin=null
      TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
        CALL 'public open fun put (p0: kotlin.String?, p1: kotlin.String?): kotlin.String? [fake_override] declared in <root>.IntervalTreeMap' type=kotlin.String? origin=null
          $this: GET_VAR 'val intervalTreeMap: <root>.IntervalTreeMap [val] declared in <root>.box' type=<root>.IntervalTreeMap origin=null
          p0: CONST String type=kotlin.String value="123"
          p1: CONST String type=kotlin.String value="356"
      WHEN type=kotlin.Unit origin=IF
        BRANCH
          if: CALL 'public final fun not (): kotlin.Boolean [operator] declared in kotlin.Boolean' type=kotlin.Boolean origin=null
            $this: CALL 'public open fun remove (key: kotlin.String?, value: kotlin.String?): kotlin.Boolean [fake_override] declared in <root>.IntervalTreeMap' type=kotlin.Boolean origin=null
              $this: GET_VAR 'val intervalTreeMap: <root>.IntervalTreeMap [val] declared in <root>.box' type=<root>.IntervalTreeMap origin=null
              key: CONST String type=kotlin.String value="123"
              value: CONST String type=kotlin.String value="356"
          then: RETURN type=kotlin.Nothing from='public final fun box (): kotlin.String declared in <root>'
            CONST String type=kotlin.String value="fail 1"
      RETURN type=kotlin.Nothing from='public final fun box (): kotlin.String declared in <root>'
        CALL 'public open fun getOrDefault (p0: kotlin.String?, p1: kotlin.String?): kotlin.String? [fake_override] declared in <root>.IntervalTreeMap' type=kotlin.String? origin=null
          $this: GET_VAR 'val intervalTreeMap: <root>.IntervalTreeMap [val] declared in <root>.box' type=<root>.IntervalTreeMap origin=null
          p0: CONST String type=kotlin.String value="123"
          p1: CONST String type=kotlin.String value="OK"
